#!/usr/bin/env python3

# Robert Radloff 2022
# Stephan Kuschel 2022-2023

import unittest
import numpy as np
import generatorpipeline as gp


# These sample values are taken from the Jain and Chlamtac (https://doi.org/10.1145/4372.4378).

paper_sample_values = [0.02, 0.15, 0.74, 3.39, 0.83, 22.37, 10.15, 15.43, 38.62, 15.92, 34.6, 10.28, 1.47, 0.4, 0.05, 11.39,
                 0.27, 0.42, 0.19, 11.37, -100]  # There is a typo in the paper: 2nd value must be 0.15 not 0.5

paper_sample_m_height = [[0.02, np.nan, np.nan, np.nan, np.nan],
                    [0.02, 0.15, np.nan, np.nan, np.nan],
                    [0.02, 0.15, 0.74, np.nan, np.nan],
                    [0.02, 0.15, 0.74, 3.39, np.nan],
                    [0.02, 0.15, 0.74, 0.83, 3.39],
                    [0.02, 0.15, 0.74, 0.83, 22.37],
                    [0.02, 0.15, 0.74, 4.465, 22.37],
                    [0.02, 0.15, 2.178333333333333, 8.592500000000001, 22.37],
                    [0.02, 0.8694444444444442, 4.752685185185185, 15.516990740740741, 38.62],
                    [0.02, 0.8694444444444442, 4.752685185185185, 15.516990740740741, 38.62],
                    [0.02, 0.8694444444444442, 9.274704861111111, 21.572663194444445, 38.62],
                    [0.02, 0.8694444444444442, 9.274704861111111, 21.572663194444445, 38.62],
                    [0.02, 2.1324631076388885, 9.274704861111111, 21.572663194444445, 38.62],
                    [0.02, 2.1324631076388885, 9.274704861111111, 21.572663194444445, 38.62],
                    [0.02, 0.7308431712962957, 6.297302000661376, 21.572663194444445, 38.62],
                    [0.02, 0.7308431712962957, 6.297302000661376, 21.572663194444445, 38.62],
                    [0.02, 0.5886745370370365, 6.297302000661376, 17.203904274140214, 38.62],
                    [0.02, 0.5886745370370365, 6.297302000661376, 17.203904274140214, 38.62],
                    [0.02, 0.4938954475308638, 4.440634353260338, 17.203904274140214, 38.62],
                    [0.02, 0.4938954475308638, 4.440634353260338, 17.203904274140214, 38.62],
                    [-100, -8.37393820297956, 4.440634353260338, 13.463286481667751, 38.62]]  # Last value is custom

paper_sample_m_pos = [[0, 1, 2, 3, 4],
                [0, 1, 2, 3, 4],
                [0, 1, 2, 3, 4],
                [0, 1, 2, 3, 4],
                [0, 1, 2, 3, 4],
                [0, 1, 2, 3, 5],
                [0, 1, 2, 4, 6],
                [0, 1, 3, 5, 7],
                [0, 2, 4, 6, 8],
                [0, 2, 4, 6, 9],
                [0, 2, 5, 7, 10],
                [0, 2, 5, 8, 11],
                [0, 3, 6, 9, 12],
                [0, 4, 7, 10, 13],
                [0, 4, 7, 11, 14],
                [0, 4, 7, 12, 15],
                [0, 4, 8, 12, 16],
                [0, 5, 9, 13, 17],
                [0, 5, 9, 14, 18],
                [0, 5, 9, 15, 19],
                [0, 5, 10, 15, 20]]

paper_sample_medianestimates = [np.nan, np.nan, 0.74, 0.74, 0.74, 0.74, 0.74, 2.178333333333333, 4.752685185185185,
                          4.752685185185185, 9.274704861111111, 9.274704861111111, 9.274704861111111,
                          9.274704861111111, 6.297302000661376, 6.297302000661376, 6.297302000661376,
                          6.297302000661376, 4.440634353260338, 4.440634353260338, 4.440634353260338]


sample2 = [0.24, 0.56, 0.19, 0.03, 0.34, 0.82, 0.1 , 0.78, 0.15, 0.39, 0.02,
       0.86, 0.22, 0.56, 0.68, 0.78, 0.24, 0.04, 0.38, 0.44, 0.91, 0.99,
       0.01, 0.56, 0.99, 0.92, 0.32, 0.47, 0.14, 0.84, 0.47, 0.21, 0.65,
       0.55, 0.49, 0.2 , 0.13, 0.81, 0.82, 0.89, 0.7 , 0.13, 0.87, 0.65,
       0.96, 0.23, 0.64, 0.71, 0.75, 0.05, 0.2 , 0.08, 0.14, 0.82, 0.48,
       0.81, 0.52, 0.42, 0.29, 0.4 , 0.76, 0.77, 0.25, 0.42, 0.96, 0.16,
       0.78, 0.43, 0.68, 0.65, 0.84, 0.44, 0.75, 0.07, 0.28, 0.58, 0.54,
       0.65, 0.75, 0.82, 0.53, 0.41, 0.07, 0.51, 0.03, 0.51, 0.48, 0.25,
       0.12, 0.57, 0.68, 0.57, 0.57, 0.43, 0.56, 0.39, 0.76, 0.78, 0.42,
       0.78]

sample2_medians = [np.nan, np.nan, 0.19      , 0.19      , 0.24      ,
       0.24      , 0.24      , 0.24      , 0.24      , 0.24      ,
       0.24      , 0.24      , 0.24      , 0.24      , 0.30240741,
       0.30240741, 0.30240741, 0.30240741, 0.30240741, 0.30240741,
       0.34517194, 0.34517194, 0.34517194, 0.34517194, 0.38600849,
       0.38600849, 0.38600849, 0.38600849, 0.38600849, 0.38600849,
       0.41928413, 0.41928413, 0.41928413, 0.41928413, 0.44571684,
       0.44571684, 0.42078073, 0.42078073, 0.44529778, 0.44529778,
       0.4702129 , 0.4702129 , 0.4702129 , 0.4702129 , 0.49398889,
       0.49398889, 0.49398889, 0.49398889, 0.51500102, 0.51500102,
       0.49418221, 0.49418221, 0.47354136, 0.47354136, 0.49344496,
       0.49344496, 0.51283085, 0.51283085, 0.49501749, 0.49501749,
       0.49501749, 0.49501749, 0.49501749, 0.49501749, 0.49501749,
       0.49501749, 0.49501749, 0.49501749, 0.49501749, 0.49501749,
       0.50992138, 0.50992138, 0.50992138, 0.50992138, 0.4961976 ,
       0.4961976 , 0.50927935, 0.50927935, 0.52197466, 0.52197466,
       0.53437758, 0.53437758, 0.52233629, 0.52233629, 0.51057798,
       0.51057798, 0.49934839, 0.49934839, 0.48812491, 0.48812491,
       0.49887806, 0.49887806, 0.50922818, 0.50922818, 0.50922818,
       0.50922818, 0.50922818, 0.50922818, 0.50922818, 0.50922818]


sample3 = [0.37, 0.38, 0.97, 0.67, 0.81, 0.28, 0.74, 0.15, 0.69, 0.31, 0.5 ,
       0.28, 0.6 , 0.35, 0.94, 0.94, 0.71, 0.9 , 0.46, 0.08, 0.55, 0.3 ,
       0.45, 0.78, 0.84, 0.05, 0.31, 0.85, 0.89, 0.02, 0.31, 0.08, 1.  ,
       0.79, 0.99, 0.8 , 1.  , 0.51, 0.76, 0.65, 0.69, 0.7 , 0.13, 0.55,
       0.43, 0.93, 0.07, 0.89, 0.73, 0.54, 0.02, 0.31, 0.21, 0.4 , 0.75,
       0.92, 0.66, 0.33, 0.36, 0.51, 0.63, 0.61, 0.64, 0.59, 0.35, 0.15,
       0.1 , 0.86, 0.03, 0.33, 0.4 , 0.26, 0.53, 0.48, 0.59, 0.44, 0.32,
       0.54, 0.1 , 0.81, 0.5 , 0.58, 0.3 , 0.14, 0.26, 0.4 , 0.22, 1.  ,
       0.55, 0.03, 0.85, 0.42, 0.57, 0.36, 0.09, 0.93, 0.69, 0.72, 0.65,
       0.33]

sample3_medians = [np.nan, np.nan, 0.97      , 0.97      , 0.67      ,
       0.67      , 0.67      , 0.67      , 0.67      , 0.67      ,
       0.60166667, 0.60166667, 0.53567347, 0.53567347, 0.53567347,
       0.53567347, 0.58834019, 0.58834019, 0.58834019, 0.58834019,
       0.54884032, 0.54884032, 0.51473791, 0.51473791, 0.54861553,
       0.54861553, 0.51454291, 0.51454291, 0.54861553, 0.54861553,
       0.51705497, 0.51705497, 0.51705497, 0.51705497, 0.54870479,
       0.54870479, 0.5781797 , 0.5781797 , 0.5781797 , 0.5781797 ,
       0.60238227, 0.60238227, 0.60238227, 0.60238227, 0.58169444,
       0.58169444, 0.58169444, 0.58169444, 0.60167562, 0.60167562,
       0.58270179, 0.58270179, 0.56356224, 0.56356224, 0.56356224,
       0.56356224, 0.58085423, 0.58085423, 0.56491953, 0.56491953,
       0.56491953, 0.56491953, 0.57899185, 0.57899185, 0.57899185,
       0.57899185, 0.56588682, 0.56588682, 0.56588682, 0.56588682,
       0.55347501, 0.55347501, 0.54135485, 0.54135485, 0.54135485,
       0.54135485, 0.53053461, 0.53053461, 0.53053461, 0.53053461,
       0.53053461, 0.53053461, 0.53053461, 0.53053461, 0.52045335,
       0.52045335, 0.5106394 , 0.5106394 , 0.52024034, 0.52024034,
       0.52024034, 0.52024034, 0.52024034, 0.52024034, 0.51126162,
       0.51126162, 0.5200614 , 0.5200614 , 0.52852242, 0.52852242]


sample4 = [0.8 , 0.51, 0.92, 0.9 , 0.01, 0.76, 0.48, 0.19, 0.6 , 0.67, 0.27,
       0.28, 0.59, 0.03, 0.47, 0.83, 0.23, 0.04, 0.19, 0.79, 0.62, 0.77,
       0.19, 0.09, 0.58, 0.21, 0.3 , 0.79, 0.49, 0.95, 0.11, 0.31, 0.66,
       0.67, 0.2 , 0.79, 0.58, 0.91, 0.67, 1.  , 0.69, 0.41, 0.06, 0.38,
       0.96, 0.36, 0.45, 0.6 , 0.73, 0.3 , 0.47, 0.64, 0.88, 0.93, 0.37,
       0.82, 0.43, 0.96, 0.87, 0.77, 0.93, 0.54, 0.51, 0.75, 0.13, 0.97,
       0.48, 0.17, 0.09, 0.64, 0.49, 0.94, 0.06, 0.39, 0.28, 0.48, 0.65,
       0.26, 0.57, 0.39, 0.45, 0.79, 0.94, 0.3 , 0.19, 0.72, 0.67, 0.2 ,
       0.98, 0.25, 0.37, 0.09, 0.45, 0.42, 0.63, 0.59, 0.96, 0.35, 0.34,
       0.72]

sample4_medians = [np.nan, np.nan, 0.92      , 0.92      , 0.8       ,
       0.8       , 0.67      , 0.67      , 0.55933333, 0.55933333,
       0.55933333, 0.55933333, 0.55933333, 0.55933333, 0.48420833,
       0.48420833, 0.48420833, 0.48420833, 0.41878441, 0.41878441,
       0.47744852, 0.47744852, 0.47744852, 0.47744852, 0.47744852,
       0.47744852, 0.43737485, 0.43737485, 0.4743911 , 0.4743911 ,
       0.4743911 , 0.4743911 , 0.4743911 , 0.4743911 , 0.4743911 ,
       0.4743911 , 0.5035667 , 0.5035667 , 0.53094839, 0.53094839,
       0.55726604, 0.55726604, 0.53268118, 0.53268118, 0.53268118,
       0.53268118, 0.51119921, 0.51119921, 0.53127835, 0.53127835,
       0.51304607, 0.51304607, 0.53060888, 0.53060888, 0.53060888,
       0.53060888, 0.53060888, 0.53060888, 0.54680156, 0.54680156,
       0.56231491, 0.56231491, 0.54774961, 0.54774961, 0.54774961,
       0.54774961, 0.54774961, 0.54774961, 0.53401052, 0.53401052,
       0.53401052, 0.53401052, 0.53401052, 0.53401052, 0.52142197,
       0.52142197, 0.52142197, 0.52142197, 0.52142197, 0.52142197,
       0.5103684 , 0.5103684 , 0.52144901, 0.52144901, 0.51033647,
       0.51033647, 0.52086973, 0.52086973, 0.52086973, 0.52086973,
       0.51054602, 0.51054602, 0.50043128, 0.50043128, 0.50043128,
       0.50043128, 0.50986138, 0.50986138, 0.50073663, 0.50073663]


sample5 = [0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1,
           0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5,
           1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5,
           1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5,
           1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5, 0, 0.5, 1, 0.5]

sample5_medians = [np.nan, np.nan, 1.        , 1.        , 0.5       ,
       0.5       , 0.5       , 0.5       , 0.41666667, 0.41666667,
       0.44444444, 0.44444444, 0.44444444, 0.44444444, 0.45833333,
       0.45833333, 0.45833333, 0.45833333, 0.46666667, 0.46666667,
       0.46666667, 0.46666667, 0.47222222, 0.47222222, 0.47222222,
       0.47222222, 0.47619048, 0.47619048, 0.47619048, 0.47619048,
       0.47916667, 0.47916667, 0.47916667, 0.47916667, 0.48148148,
       0.48148148, 0.48148148, 0.48148148, 0.48333333, 0.48333333,
       0.48333333, 0.48333333, 0.48484848, 0.48484848, 0.48484848,
       0.48484848, 0.48611111, 0.48611111, 0.48611111, 0.48611111,
       0.48717949, 0.48717949, 0.48717949, 0.48717949, 0.48809524,
       0.48809524, 0.48809524, 0.48809524, 0.48888889, 0.48888889,
       0.48888889, 0.48888889, 0.48958333, 0.48958333, 0.48958333,
       0.48958333, 0.49019608, 0.49019608, 0.49019608, 0.49019608,
       0.49074074, 0.49074074, 0.49074074, 0.49074074, 0.49122807,
       0.49122807, 0.49122807, 0.49122807, 0.49166667, 0.49166667,
       0.49166667, 0.49166667, 0.49206349, 0.49206349, 0.49206349,
       0.49206349, 0.49242424, 0.49242424, 0.49242424, 0.49242424,
       0.49275362, 0.49275362, 0.49275362, 0.49275362, 0.49305556,
       0.49305556, 0.49305556, 0.49305556, 0.49333333, 0.49333333]


class TestMedian(unittest.TestCase):

    def checkaccvalues(self, accumulator, vals, results):
        for i, (v, m) in enumerate(zip(vals, results)):
            accumulator.accumulate(v)
            self.assertTrue(np.allclose(accumulator.value, m, equal_nan=True), msg='value {} and expected median {} differ after sample value {} (index {})'.format(accumulator.value, m, v, i))

    def test_1d_paperdata(self):
        quant = gp.accumulators.QuantileEstimator(p=0.5)
        for v, p, h in zip(paper_sample_values, paper_sample_m_pos, paper_sample_m_height):
            quant.accumulate(v)
            n, pos, height = quant._debug_info
            pos, height = list(pos), list(height)
            self.assertEqual(p, pos, f'Position test failed after value {n}: {v}.')
            self.assertTrue(np.allclose(h, height, equal_nan=True), f'Height test failed after value {n}: {v}.')

    def test_1d_median(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, paper_sample_values, paper_sample_medianestimates)

    def test_1d_median_sample2(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, sample2, sample2_medians)

    def test_1d_median_sample3(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, sample3, sample3_medians)

    def test_1d_median_sample4(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, sample4, sample4_medians)

    def test_1d_median_sample5(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, sample5, sample5_medians)

    def test_2d_median_sample234(self):
        median = gp.accumulators.MedianEstimator()
        self.checkaccvalues(median, zip(sample2, sample3, sample4), zip(sample2_medians, sample3_medians, sample4_medians))


if __name__ == '__main__':
    unittest.main()
